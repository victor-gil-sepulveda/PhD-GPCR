import sys
import tabulate
import os
from plopmetrics import processDir,filterRecords,genSingleTraj,genMetricsFile
from tools import load_dic_in_json, save_dic_in_json, use_pyproct,get_best_clustering,\
create_dir

if __name__ == "__main__":

    RESULTS_PATH = os.path.join("Results", sys.argv[1], sys.argv[2])
    create_dir(RESULTS_PATH)

    # Perform the filtering
    records = processDir(sys.argv[1], sys.argv[2])
    selection = filterRecords("'L1  Binding Ene' < -226 and 'L1  Binding Ene' > -424 and 'L1(15.360.555.4)' < 6.5 and 'L1(15.360.555.4)' > 1.5", records)
    genSingleTraj(os.path.join(RESULTS_PATH,"%s.filtered.pdb"%(sys.argv[2])), records, selection)
#    genMetricsFile(os.path.join(RESULTS_PATH,"%s.metrics.dat"%(sys.argv[2])),
#                ["L1(15.360.555.4)","L1  Binding Ene"], selection)
    metrics = genMetrics(["L1(15.360.555.4)","L1  Binding Ene"], selection).T
    
    # Prepare the clustering for this guy
    ## Load template and modify its contents for this case
    CLUSTERING_PATH = os.path.join(RESULTS_PATH,"%s_%s_clustering"%(sys.argv[1], sys.argv[2]))
    SCRIPT_PATH = os.path.join(RESULTS_PATH,"clustering.json")
    script = load_dic_in_json(sys.argv[3])
    script["workspace"]["base"] = CLUSTERING_PATH
    save_dic_in_json(script, SCRIPT_PATH)
    os.system("python -m pyproct.main %s "%(SCRIPT_PATH))
    best_clustering = Clustering.from_dic(get_best_clustering(CLUSTERING_PATH))
    
    # Now calculate the values
    results = {}
    for cluster in best_clustering.clusters:
        energies = metrics[1][cluster.all_elements]
        distances = metrics[0][cluster.all_elements]
        results[cluster.id]["max_energy"] = numpy.max(energies)
        results[cluster.id]["min_energy"] = numpy.min(energies)
        results[cluster.id]["mean_energy"] = numpy.mean(energies)
        results[cluster.id]["mean_distance"] = numpy.mean(distances)
        
    # Tabulate!
    TABLE_PATH = os.path.join(RESULTS_PATH,"table.rst")
    items = ["max_energy","min_energy","mean_energy", "mean_distance"]
    header = ["cluster id"]; header.extend(items)
    table = []
    for cluster_id in results:
        row = []
        for item in items:
            row.append(results[cluster_id][item])
    open(TABLE_PATH,"w").write(tabulate.tabulate(table, headers, tablefmt="rst"))
    
    
    
    
